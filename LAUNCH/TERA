#!/bin/bash
if [ -z $1 ];then
	echo "No input file specified. Exiting..."
	echo "Call as: $0 input.com [version]"
        . SetEnvironment.sh TERACHEM -ver
	exit 1
fi

if [[ ! -e "$1" ]];then
	echo "Input file doesn't exists!"
fi

CUR_DIR=$(pwd)
inp=$1
# [[:blank:]]+ matches also tabs 
#numgpus=$(egrep -e '^[[:blank:]]*gpus[[:blank:]]+' $1 | head -1 | awk '{print $2}')

# This could all be done more nicely using awk only
numgpus=$(awk '{if ($1=="gpus") {print $2;exit 0}}' $inp)
coord=$(awk '{if ($1=="coordinates") {print $2;exit 0}}' $inp)
if [ -z $numgpus ];then
	echo "Number of gpus not specified. Exiting..."
	echo "Set variable "gpus" in $1"
	exit 1
fi

if [ ! -e $coord ];then
	echo "Geometry not found. Exiting..."
	echo "Set variable "coordinates" in $1"
	exit 1
fi
coord_name=$(basename $coord)
coord_mm=$(awk '{if ($1=="qmmm") {print $2;exit 0}}' $inp)
if [[ ! -z $coord_mm ]];then
   coord_mm_name=$(basename $coord_mm)
   if [[ ! -e $coord_mm ]];then
      echo "MM geometry not found. Exiting..."
      echo "Set or unset variable "qmmm" in $1"
      exit 1
   fi
fi
guess1=$(awk '{if ($1=="guess") {print $2;exit 0}}' $inp)
guess2=$(awk '{if ($1=="guess") {print $3;exit 0}}' $inp)
plumed=$(awk '{if ($1=="plumedfile") {print $2;exit 0}}' $inp)


if [[ ! -z "$guess1" ]];then
   if [[ ! -e "$guess1" ]];then
	echo "Guess file $guess1 not found. Exiting..."
	echo "Set or unset variable "guess" in $1"
	exit 1
   fi
fi
if [[ ! -z "$guess2" ]];then
   if [[ ! -e "$guess2" ]];then
      echo "Guess file $guess2 not found. Exiting..."
      echo "Set or unset variable "guess" in $1"
      exit 1
   fi
fi

if [[ ! -z "$plumed" ]];then
   plumed_name=$(basename $plumed)
   if [[ ! -e "$plumed" ]];then
      echo "PLUMED input file $plumed not found. Exiting..."
      exit 1
   fi
fi

scrdir=$(awk '{if ($1=="scrdir") {print $2;exit 0}}' $inp)
#- All clear, let's go.

version=$2
source SetEnvironment.sh TERACHEM $version
if [[ $? != "0" ]];then
   echo "Error when exporting TeraChem parameters in SetEnvironment.sh"
   exit 1
fi

if [[ -z $scrdir ]];then
   copyback=true
   scrdir="/scratch/$USER/TERA-$1_${JOB_ID}"
   mkdir $scrdir
#	echo "scrdir $scrdir"  > $scrdir/$1
   echo "scrdir not specified, using : $scrdir"
   echo "memcheck no" > $scrdir/$1
   cp $coord $scrdir/$coord_name
   echo "coordinates $coord_name" >> $scrdir/$1
   if [[ ! -z "$coord_mm" ]];then
       cp $coord_mm $scrdir/$coord_mm_name
       echo "qmmm  $coord_mm_name" >> $scrdir/$1
   fi
   if [[ ! -z "$plumed" ]];then
       cp $plumed $scrdir/$plumed
       echo "plumedfile  $plumed_name" >> $scrdir/$1
   fi
   
   if [[ ! -z "$guess1" ]];then
      cp $guess1 $scrdir
      echo $?
      echo $guess1
      if [[ ! -z "$guess2" ]];then
         cp $guess2 $scrdir
         echo "guess $scrdir/ca $scrdir/cb" >> $scrdir/$1
      else
         echo "guess $scrdir/c0"     >> $scrdir/$1
      fi
   fi
   egrep -v -e "^[[:blank:]]*coordinates[[:blank:]]+" -e \
      '^[[:blank:]]*qmmm[[:blank:]]+' -e '^[[:blank:]]*guess[[:blank:]]+' $1 >> $scrdir/$1
   echo "end" >> $scrdir/$1
   cd $scrdir

elif [ -e $scrdir ];then
   echo "WARNING: Scratch directory specified in $1 already exists!"
   echo "It's content will be rewritten." 
   copyback=false
else
   copyback=false
fi

 export OMP_NUM_THREADS=$numgpus  #setting to number of gpus, used only for MKL library anyway i.e. for diagonalization
 echo "Running Terachem job $1 using $OMP_NUM_THREADS cpu cores"
 node=$(uname -n)
 echo $node
 date

$TERAEXE $1 > $CUR_DIR/$1.out

if [[ $copyback = "true" ]];then
 cd ../
 cp -r $scrdir/ $CUR_DIR
 if [[ $? -ne "0" ]];then
   echo "Error when copying the data from scratch back to the server."
   echo "I will keep the directory $SCRDIR on node:"
   uname -a
   exit 1
 fi
 rm -r $scrdir
fi


